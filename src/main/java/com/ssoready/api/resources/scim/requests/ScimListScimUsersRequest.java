/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.resources.scim.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScimListScimUsersRequest.Builder.class)
public final class ScimListScimUsersRequest {
    private final Optional<String> scimDirectoryId;

    private final Optional<String> organizationId;

    private final Optional<String> organizationExternalId;

    private final Optional<String> scimGroupId;

    private final Optional<String> pageToken;

    private final Map<String, Object> additionalProperties;

    private ScimListScimUsersRequest(
            Optional<String> scimDirectoryId,
            Optional<String> organizationId,
            Optional<String> organizationExternalId,
            Optional<String> scimGroupId,
            Optional<String> pageToken,
            Map<String, Object> additionalProperties) {
        this.scimDirectoryId = scimDirectoryId;
        this.organizationId = organizationId;
        this.organizationExternalId = organizationExternalId;
        this.scimGroupId = scimGroupId;
        this.pageToken = pageToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The SCIM directory to list from.
     * <p>One of <code>scimDirectoryId</code>, <code>organizationId</code>, or <code>organizationExternalId</code> must be specified.</p>
     */
    @JsonProperty("scimDirectoryId")
    public Optional<String> getScimDirectoryId() {
        return scimDirectoryId;
    }

    /**
     * @return The ID of the organization to list from. The primary SCIM directory of this organization is used.
     * <p>One of <code>scimDirectoryId</code>, <code>organizationId</code>, or <code>organizationExternalId</code> must be specified.</p>
     */
    @JsonProperty("organizationId")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    /**
     * @return The <code>externalId</code> of the organization to list from. The primary SCIM directory of this organization is used.
     * <p>One of <code>scimDirectoryId</code>, <code>organizationId</code>, or <code>organizationExternalId</code> must be specified.</p>
     */
    @JsonProperty("organizationExternalId")
    public Optional<String> getOrganizationExternalId() {
        return organizationExternalId;
    }

    /**
     * @return If specified, only users that are members of this SCIM group are returned.
     */
    @JsonProperty("scimGroupId")
    public Optional<String> getScimGroupId() {
        return scimGroupId;
    }

    /**
     * @return Pagination token. Leave empty to get the first page of results.
     */
    @JsonProperty("pageToken")
    public Optional<String> getPageToken() {
        return pageToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScimListScimUsersRequest && equalTo((ScimListScimUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScimListScimUsersRequest other) {
        return scimDirectoryId.equals(other.scimDirectoryId)
                && organizationId.equals(other.organizationId)
                && organizationExternalId.equals(other.organizationExternalId)
                && scimGroupId.equals(other.scimGroupId)
                && pageToken.equals(other.pageToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.scimDirectoryId,
                this.organizationId,
                this.organizationExternalId,
                this.scimGroupId,
                this.pageToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> scimDirectoryId = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> organizationExternalId = Optional.empty();

        private Optional<String> scimGroupId = Optional.empty();

        private Optional<String> pageToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ScimListScimUsersRequest other) {
            scimDirectoryId(other.getScimDirectoryId());
            organizationId(other.getOrganizationId());
            organizationExternalId(other.getOrganizationExternalId());
            scimGroupId(other.getScimGroupId());
            pageToken(other.getPageToken());
            return this;
        }

        @JsonSetter(value = "scimDirectoryId", nulls = Nulls.SKIP)
        public Builder scimDirectoryId(Optional<String> scimDirectoryId) {
            this.scimDirectoryId = scimDirectoryId;
            return this;
        }

        public Builder scimDirectoryId(String scimDirectoryId) {
            this.scimDirectoryId = Optional.ofNullable(scimDirectoryId);
            return this;
        }

        @JsonSetter(value = "organizationId", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        @JsonSetter(value = "organizationExternalId", nulls = Nulls.SKIP)
        public Builder organizationExternalId(Optional<String> organizationExternalId) {
            this.organizationExternalId = organizationExternalId;
            return this;
        }

        public Builder organizationExternalId(String organizationExternalId) {
            this.organizationExternalId = Optional.ofNullable(organizationExternalId);
            return this;
        }

        @JsonSetter(value = "scimGroupId", nulls = Nulls.SKIP)
        public Builder scimGroupId(Optional<String> scimGroupId) {
            this.scimGroupId = scimGroupId;
            return this;
        }

        public Builder scimGroupId(String scimGroupId) {
            this.scimGroupId = Optional.ofNullable(scimGroupId);
            return this;
        }

        @JsonSetter(value = "pageToken", nulls = Nulls.SKIP)
        public Builder pageToken(Optional<String> pageToken) {
            this.pageToken = pageToken;
            return this;
        }

        public Builder pageToken(String pageToken) {
            this.pageToken = Optional.ofNullable(pageToken);
            return this;
        }

        public ScimListScimUsersRequest build() {
            return new ScimListScimUsersRequest(
                    scimDirectoryId,
                    organizationId,
                    organizationExternalId,
                    scimGroupId,
                    pageToken,
                    additionalProperties);
        }
    }
}
