/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.resources.scim;

import com.ssoready.api.core.ClientOptions;
import com.ssoready.api.core.ObjectMappers;
import com.ssoready.api.core.RequestOptions;
import com.ssoready.api.core.SSOReadyApiException;
import com.ssoready.api.core.SSOReadyException;
import com.ssoready.api.resources.scim.requests.ScimListScimGroupsRequest;
import com.ssoready.api.resources.scim.requests.ScimListScimUsersRequest;
import com.ssoready.api.types.GetScimGroupResponse;
import com.ssoready.api.types.GetScimUserResponse;
import com.ssoready.api.types.ListScimGroupsResponse;
import com.ssoready.api.types.ListScimUsersResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class ScimClient {
    protected final ClientOptions clientOptions;

    public ScimClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Gets a list of SCIM groups in a SCIM directory.
     */
    public ListScimGroupsResponse listScimGroups() {
        return listScimGroups(ScimListScimGroupsRequest.builder().build());
    }

    /**
     * Gets a list of SCIM groups in a SCIM directory.
     */
    public ListScimGroupsResponse listScimGroups(ScimListScimGroupsRequest request) {
        return listScimGroups(request, null);
    }

    /**
     * Gets a list of SCIM groups in a SCIM directory.
     */
    public ListScimGroupsResponse listScimGroups(ScimListScimGroupsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/scim/groups");
        if (request.getScimDirectoryId().isPresent()) {
            httpUrl.addQueryParameter(
                    "scimDirectoryId", request.getScimDirectoryId().get());
        }
        if (request.getOrganizationId().isPresent()) {
            httpUrl.addQueryParameter(
                    "organizationId", request.getOrganizationId().get());
        }
        if (request.getOrganizationExternalId().isPresent()) {
            httpUrl.addQueryParameter(
                    "organizationExternalId",
                    request.getOrganizationExternalId().get());
        }
        if (request.getPageToken().isPresent()) {
            httpUrl.addQueryParameter("pageToken", request.getPageToken().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListScimGroupsResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }

    /**
     * Gets a SCIM group in a SCIM directory.
     */
    public GetScimGroupResponse getScimGroup(String id) {
        return getScimGroup(id, null);
    }

    /**
     * Gets a SCIM group in a SCIM directory.
     */
    public GetScimGroupResponse getScimGroup(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/scim/groups")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetScimGroupResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }

    /**
     * Gets a list of SCIM users in a SCIM directory.
     */
    public ListScimUsersResponse listScimUsers() {
        return listScimUsers(ScimListScimUsersRequest.builder().build());
    }

    /**
     * Gets a list of SCIM users in a SCIM directory.
     */
    public ListScimUsersResponse listScimUsers(ScimListScimUsersRequest request) {
        return listScimUsers(request, null);
    }

    /**
     * Gets a list of SCIM users in a SCIM directory.
     */
    public ListScimUsersResponse listScimUsers(ScimListScimUsersRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/scim/users");
        if (request.getScimDirectoryId().isPresent()) {
            httpUrl.addQueryParameter(
                    "scimDirectoryId", request.getScimDirectoryId().get());
        }
        if (request.getOrganizationId().isPresent()) {
            httpUrl.addQueryParameter(
                    "organizationId", request.getOrganizationId().get());
        }
        if (request.getOrganizationExternalId().isPresent()) {
            httpUrl.addQueryParameter(
                    "organizationExternalId",
                    request.getOrganizationExternalId().get());
        }
        if (request.getScimGroupId().isPresent()) {
            httpUrl.addQueryParameter("scimGroupId", request.getScimGroupId().get());
        }
        if (request.getPageToken().isPresent()) {
            httpUrl.addQueryParameter("pageToken", request.getPageToken().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListScimUsersResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }

    /**
     * Gets a SCIM user.
     */
    public GetScimUserResponse getScimUser(String id) {
        return getScimUser(id, null);
    }

    /**
     * Gets a SCIM user.
     */
    public GetScimUserResponse getScimUser(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/scim/users")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetScimUserResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }
}
