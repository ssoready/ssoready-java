/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.resources.management.organizations;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.ssoready.api.core.ClientOptions;
import com.ssoready.api.core.MediaTypes;
import com.ssoready.api.core.ObjectMappers;
import com.ssoready.api.core.RequestOptions;
import com.ssoready.api.core.SSOReadyApiException;
import com.ssoready.api.core.SSOReadyException;
import com.ssoready.api.resources.management.organizations.requests.OrganizationsListOrganizationsRequest;
import com.ssoready.api.types.CreateOrganizationResponse;
import com.ssoready.api.types.GetOrganizationResponse;
import com.ssoready.api.types.ListOrganizationsResponse;
import com.ssoready.api.types.Organization;
import com.ssoready.api.types.UpdateOrganizationResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class OrganizationsClient {
    protected final ClientOptions clientOptions;

    public OrganizationsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Gets a list of organizations.
     */
    public ListOrganizationsResponse listOrganizations() {
        return listOrganizations(OrganizationsListOrganizationsRequest.builder().build());
    }

    /**
     * Gets a list of organizations.
     */
    public ListOrganizationsResponse listOrganizations(OrganizationsListOrganizationsRequest request) {
        return listOrganizations(request, null);
    }

    /**
     * Gets a list of organizations.
     */
    public ListOrganizationsResponse listOrganizations(
            OrganizationsListOrganizationsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/organizations");
        if (request.getPageToken().isPresent()) {
            httpUrl.addQueryParameter("pageToken", request.getPageToken().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListOrganizationsResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }

    /**
     * Creates an organization.
     */
    public CreateOrganizationResponse createOrganization() {
        return createOrganization(Organization.builder().build());
    }

    /**
     * Creates an organization.
     */
    public CreateOrganizationResponse createOrganization(Organization request) {
        return createOrganization(request, null);
    }

    /**
     * Creates an organization.
     */
    public CreateOrganizationResponse createOrganization(Organization request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/organizations")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SSOReadyException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CreateOrganizationResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }

    /**
     * Gets an organization.
     */
    public GetOrganizationResponse getOrganization(String id) {
        return getOrganization(id, null);
    }

    /**
     * Gets an organization.
     */
    public GetOrganizationResponse getOrganization(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/organizations")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetOrganizationResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }

    /**
     * Updates an organization.
     */
    public UpdateOrganizationResponse updateOrganization(String id) {
        return updateOrganization(id, Organization.builder().build());
    }

    /**
     * Updates an organization.
     */
    public UpdateOrganizationResponse updateOrganization(String id, Organization request) {
        return updateOrganization(id, request, null);
    }

    /**
     * Updates an organization.
     */
    public UpdateOrganizationResponse updateOrganization(
            String id, Organization request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/organizations")
                .addPathSegment(id)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SSOReadyException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UpdateOrganizationResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SSOReadyApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SSOReadyException("Network error executing HTTP request", e);
        }
    }
}
