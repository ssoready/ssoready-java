/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.resources.saml.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetSamlRedirectUrlRequest.Builder.class)
public final class GetSamlRedirectUrlRequest {
    private final Optional<String> samlConnectionId;

    private final Optional<String> organizationId;

    private final Optional<String> organizationExternalId;

    private final Optional<String> state;

    private final Map<String, Object> additionalProperties;

    private GetSamlRedirectUrlRequest(
            Optional<String> samlConnectionId,
            Optional<String> organizationId,
            Optional<String> organizationExternalId,
            Optional<String> state,
            Map<String, Object> additionalProperties) {
        this.samlConnectionId = samlConnectionId;
        this.organizationId = organizationId;
        this.organizationExternalId = organizationExternalId;
        this.state = state;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The SAML connection to start a SAML login for.
     * <p>One of <code>samlConnectionId</code>, <code>organizationId</code>, or <code>organizationExternalId</code> must be specified.</p>
     */
    @JsonProperty("samlConnectionId")
    public Optional<String> getSamlConnectionId() {
        return samlConnectionId;
    }

    /**
     * @return The ID of the organization to start a SAML login for.
     * <p>The primary SAML connection in this organization will be used for logins.</p>
     * <p>One of <code>samlConnectionId</code>, <code>organizationId</code>, or <code>organizationExternalId</code> must be specified.</p>
     */
    @JsonProperty("organizationId")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    /**
     * @return The <code>externalId</code> of the organization to start a SAML login for.
     * <p>The primary SAML connection in this organization will be used for logins.</p>
     * <p>One of <code>samlConnectionId</code>, <code>organizationId</code>, or <code>organizationExternalId</code> must be specified.</p>
     */
    @JsonProperty("organizationExternalId")
    public Optional<String> getOrganizationExternalId() {
        return organizationExternalId;
    }

    /**
     * @return This string will be returned back to you when you redeem this login's SAML access code.
     * <p>You can do anything you like with this <code>state</code>, but the most common use-case is to keep track of where to redirect
     * your user back to after logging in with SAML.</p>
     */
    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetSamlRedirectUrlRequest && equalTo((GetSamlRedirectUrlRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetSamlRedirectUrlRequest other) {
        return samlConnectionId.equals(other.samlConnectionId)
                && organizationId.equals(other.organizationId)
                && organizationExternalId.equals(other.organizationExternalId)
                && state.equals(other.state);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.samlConnectionId, this.organizationId, this.organizationExternalId, this.state);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> samlConnectionId = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> organizationExternalId = Optional.empty();

        private Optional<String> state = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetSamlRedirectUrlRequest other) {
            samlConnectionId(other.getSamlConnectionId());
            organizationId(other.getOrganizationId());
            organizationExternalId(other.getOrganizationExternalId());
            state(other.getState());
            return this;
        }

        @JsonSetter(value = "samlConnectionId", nulls = Nulls.SKIP)
        public Builder samlConnectionId(Optional<String> samlConnectionId) {
            this.samlConnectionId = samlConnectionId;
            return this;
        }

        public Builder samlConnectionId(String samlConnectionId) {
            this.samlConnectionId = Optional.ofNullable(samlConnectionId);
            return this;
        }

        @JsonSetter(value = "organizationId", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        @JsonSetter(value = "organizationExternalId", nulls = Nulls.SKIP)
        public Builder organizationExternalId(Optional<String> organizationExternalId) {
            this.organizationExternalId = organizationExternalId;
            return this;
        }

        public Builder organizationExternalId(String organizationExternalId) {
            this.organizationExternalId = Optional.ofNullable(organizationExternalId);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        public GetSamlRedirectUrlRequest build() {
            return new GetSamlRedirectUrlRequest(
                    samlConnectionId, organizationId, organizationExternalId, state, additionalProperties);
        }
    }
}
