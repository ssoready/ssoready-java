/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Organization.Builder.class)
public final class Organization {
    private final Optional<String> id;

    private final Optional<String> environmentId;

    private final Optional<String> displayName;

    private final Optional<String> externalId;

    private final Optional<List<String>> domains;

    private final Map<String, Object> additionalProperties;

    private Organization(
            Optional<String> id,
            Optional<String> environmentId,
            Optional<String> displayName,
            Optional<String> externalId,
            Optional<List<String>> domains,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.environmentId = environmentId;
        this.displayName = displayName;
        this.externalId = externalId;
        this.domains = domains;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for this organization.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The environment this organization belongs to.
     */
    @JsonProperty("environmentId")
    public Optional<String> getEnvironmentId() {
        return environmentId;
    }

    /**
     * @return An optional human-friendly name for this organization.
     */
    @JsonProperty("displayName")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    /**
     * @return An identifier you can attach to an organization. Meant to be used to correlate an SSOReady organization to your
     * internal equivalent concept.
     * <p>External IDs are unique within an environment. No two organizations in the same environment can have
     * the same external ID.</p>
     */
    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    /**
     * @return A list of domains that users from this organization use.
     * <p>SAML connections and SCIM directories within this organization will only produce users whose email are included in
     * <code>domains</code>. SSOReady will reject SAML and SCIM users that do not fall within <code>domains</code>.</p>
     */
    @JsonProperty("domains")
    public Optional<List<String>> getDomains() {
        return domains;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Organization && equalTo((Organization) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Organization other) {
        return id.equals(other.id)
                && environmentId.equals(other.environmentId)
                && displayName.equals(other.displayName)
                && externalId.equals(other.externalId)
                && domains.equals(other.domains);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.environmentId, this.displayName, this.externalId, this.domains);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> environmentId = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<List<String>> domains = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Organization other) {
            id(other.getId());
            environmentId(other.getEnvironmentId());
            displayName(other.getDisplayName());
            externalId(other.getExternalId());
            domains(other.getDomains());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "environmentId", nulls = Nulls.SKIP)
        public Builder environmentId(Optional<String> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        public Builder environmentId(String environmentId) {
            this.environmentId = Optional.ofNullable(environmentId);
            return this;
        }

        @JsonSetter(value = "displayName", nulls = Nulls.SKIP)
        public Builder displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @JsonSetter(value = "domains", nulls = Nulls.SKIP)
        public Builder domains(Optional<List<String>> domains) {
            this.domains = domains;
            return this;
        }

        public Builder domains(List<String> domains) {
            this.domains = Optional.ofNullable(domains);
            return this;
        }

        public Organization build() {
            return new Organization(id, environmentId, displayName, externalId, domains, additionalProperties);
        }
    }
}
