/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RedeemSamlAccessCodeResponse.Builder.class)
public final class RedeemSamlAccessCodeResponse {
    private final Optional<String> email;

    private final Optional<String> state;

    private final Optional<Map<String, String>> attributes;

    private final Optional<String> organizationId;

    private final Optional<String> organizationExternalId;

    private final Optional<String> samlFlowId;

    private final Map<String, Object> additionalProperties;

    private RedeemSamlAccessCodeResponse(
            Optional<String> email,
            Optional<String> state,
            Optional<Map<String, String>> attributes,
            Optional<String> organizationId,
            Optional<String> organizationExternalId,
            Optional<String> samlFlowId,
            Map<String, Object> additionalProperties) {
        this.email = email;
        this.state = state;
        this.attributes = attributes;
        this.organizationId = organizationId;
        this.organizationExternalId = organizationExternalId;
        this.samlFlowId = samlFlowId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The user's email address.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return The <code>state</code> you provided when getting a SAML initiation URL, if any.
     * <p>If your user logged in to your product using Identity Provider-initiated SAML (e.g. they clicked on your app inside
     * their corporate Okta dashboard), then <code>state</code> will be empty.</p>
     * <p>SSOReady validates the authenticity of non-empty <code>state</code> values. You do not need to implement your own CSRF on top
     * of it, but doing so anyway will have no bad consequences.</p>
     */
    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    /**
     * @return Arbitrary key-value pairs the Identity Provider included about the user.
     * <p>Typically, these <code>attributes</code> are used to pass along the user's first/last name, or whether they should be
     * considered an admin within their company.</p>
     */
    @JsonProperty("attributes")
    public Optional<Map<String, String>> getAttributes() {
        return attributes;
    }

    /**
     * @return The ID of the organization this user belongs to.
     */
    @JsonProperty("organizationId")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    /**
     * @return The <code>externalId</code>, if any, of the organization this user belongs to.
     */
    @JsonProperty("organizationExternalId")
    public Optional<String> getOrganizationExternalId() {
        return organizationExternalId;
    }

    /**
     * @return A unique identifier of this particular SAML login. It is not a secret. You can safely log it.
     * <p>SSOReady maintains an audit log of every SAML login. Use this SAML flow ID to find this login in the audit logs.</p>
     */
    @JsonProperty("samlFlowId")
    public Optional<String> getSamlFlowId() {
        return samlFlowId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RedeemSamlAccessCodeResponse && equalTo((RedeemSamlAccessCodeResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RedeemSamlAccessCodeResponse other) {
        return email.equals(other.email)
                && state.equals(other.state)
                && attributes.equals(other.attributes)
                && organizationId.equals(other.organizationId)
                && organizationExternalId.equals(other.organizationExternalId)
                && samlFlowId.equals(other.samlFlowId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.email,
                this.state,
                this.attributes,
                this.organizationId,
                this.organizationExternalId,
                this.samlFlowId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> email = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<Map<String, String>> attributes = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> organizationExternalId = Optional.empty();

        private Optional<String> samlFlowId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RedeemSamlAccessCodeResponse other) {
            email(other.getEmail());
            state(other.getState());
            attributes(other.getAttributes());
            organizationId(other.getOrganizationId());
            organizationExternalId(other.getOrganizationExternalId());
            samlFlowId(other.getSamlFlowId());
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "attributes", nulls = Nulls.SKIP)
        public Builder attributes(Optional<Map<String, String>> attributes) {
            this.attributes = attributes;
            return this;
        }

        public Builder attributes(Map<String, String> attributes) {
            this.attributes = Optional.ofNullable(attributes);
            return this;
        }

        @JsonSetter(value = "organizationId", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        @JsonSetter(value = "organizationExternalId", nulls = Nulls.SKIP)
        public Builder organizationExternalId(Optional<String> organizationExternalId) {
            this.organizationExternalId = organizationExternalId;
            return this;
        }

        public Builder organizationExternalId(String organizationExternalId) {
            this.organizationExternalId = Optional.ofNullable(organizationExternalId);
            return this;
        }

        @JsonSetter(value = "samlFlowId", nulls = Nulls.SKIP)
        public Builder samlFlowId(Optional<String> samlFlowId) {
            this.samlFlowId = samlFlowId;
            return this;
        }

        public Builder samlFlowId(String samlFlowId) {
            this.samlFlowId = Optional.ofNullable(samlFlowId);
            return this;
        }

        public RedeemSamlAccessCodeResponse build() {
            return new RedeemSamlAccessCodeResponse(
                    email, state, attributes, organizationId, organizationExternalId, samlFlowId, additionalProperties);
        }
    }
}
