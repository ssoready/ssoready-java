/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SamlConnection.Builder.class)
public final class SamlConnection {
    private final Optional<String> id;

    private final Optional<String> organizationId;

    private final Optional<Boolean> primary;

    private final Optional<String> idpRedirectUrl;

    private final Optional<String> idpCertificate;

    private final Optional<String> idpEntityId;

    private final Optional<String> spEntityId;

    private final Optional<String> spAcsUrl;

    private final Map<String, Object> additionalProperties;

    private SamlConnection(
            Optional<String> id,
            Optional<String> organizationId,
            Optional<Boolean> primary,
            Optional<String> idpRedirectUrl,
            Optional<String> idpCertificate,
            Optional<String> idpEntityId,
            Optional<String> spEntityId,
            Optional<String> spAcsUrl,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.organizationId = organizationId;
        this.primary = primary;
        this.idpRedirectUrl = idpRedirectUrl;
        this.idpCertificate = idpCertificate;
        this.idpEntityId = idpEntityId;
        this.spEntityId = spEntityId;
        this.spAcsUrl = spAcsUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for this SAML connection.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The organization this SAML connection belongs to.
     */
    @JsonProperty("organizationId")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    /**
     * @return Whether this is the primary SAML connection for the organization.
     */
    @JsonProperty("primary")
    public Optional<Boolean> getPrimary() {
        return primary;
    }

    /**
     * @return URL to redirect to when initiating SAML flows.
     * <p>IDP redirect URLs are assigned by an Identity Provider, and need to be inputted into SSOReady.</p>
     */
    @JsonProperty("idpRedirectUrl")
    public Optional<String> getIdpRedirectUrl() {
        return idpRedirectUrl;
    }

    /**
     * @return Certificate to authenticate SAML assertions. This is a PEM-encoded X.509 certificate.
     * <p>IDP certificates are assigned by an Identity Provider, and need to be inputted into SSOReady.</p>
     */
    @JsonProperty("idpCertificate")
    public Optional<String> getIdpCertificate() {
        return idpCertificate;
    }

    /**
     * @return Identifier for the identity provider when handling SAML operations.
     * <p>IDP entity IDs are assigned by an Identity Provider, and need to be inputted into SSOReady.</p>
     */
    @JsonProperty("idpEntityId")
    public Optional<String> getIdpEntityId() {
        return idpEntityId;
    }

    /**
     * @return Identifier for the SAML connection when handling SAML operations.
     * <p>SP entity IDs are assigned by SSOReady, and need to be inputted into your customer's Identity Provider.</p>
     */
    @JsonProperty("spEntityId")
    public Optional<String> getSpEntityId() {
        return spEntityId;
    }

    /**
     * @return URL the Identity Provider redirects to when transmitting SAML assertions. Stands for &quot;Service Provider Assertion
     * Consumer Service&quot; URL.
     * <p>SP ACS URLs are assigned by SSOReady, and need to be inputted into your customer's Identity Provider.</p>
     */
    @JsonProperty("spAcsUrl")
    public Optional<String> getSpAcsUrl() {
        return spAcsUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SamlConnection && equalTo((SamlConnection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SamlConnection other) {
        return id.equals(other.id)
                && organizationId.equals(other.organizationId)
                && primary.equals(other.primary)
                && idpRedirectUrl.equals(other.idpRedirectUrl)
                && idpCertificate.equals(other.idpCertificate)
                && idpEntityId.equals(other.idpEntityId)
                && spEntityId.equals(other.spEntityId)
                && spAcsUrl.equals(other.spAcsUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.organizationId,
                this.primary,
                this.idpRedirectUrl,
                this.idpCertificate,
                this.idpEntityId,
                this.spEntityId,
                this.spAcsUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<Boolean> primary = Optional.empty();

        private Optional<String> idpRedirectUrl = Optional.empty();

        private Optional<String> idpCertificate = Optional.empty();

        private Optional<String> idpEntityId = Optional.empty();

        private Optional<String> spEntityId = Optional.empty();

        private Optional<String> spAcsUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SamlConnection other) {
            id(other.getId());
            organizationId(other.getOrganizationId());
            primary(other.getPrimary());
            idpRedirectUrl(other.getIdpRedirectUrl());
            idpCertificate(other.getIdpCertificate());
            idpEntityId(other.getIdpEntityId());
            spEntityId(other.getSpEntityId());
            spAcsUrl(other.getSpAcsUrl());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "organizationId", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        @JsonSetter(value = "primary", nulls = Nulls.SKIP)
        public Builder primary(Optional<Boolean> primary) {
            this.primary = primary;
            return this;
        }

        public Builder primary(Boolean primary) {
            this.primary = Optional.ofNullable(primary);
            return this;
        }

        @JsonSetter(value = "idpRedirectUrl", nulls = Nulls.SKIP)
        public Builder idpRedirectUrl(Optional<String> idpRedirectUrl) {
            this.idpRedirectUrl = idpRedirectUrl;
            return this;
        }

        public Builder idpRedirectUrl(String idpRedirectUrl) {
            this.idpRedirectUrl = Optional.ofNullable(idpRedirectUrl);
            return this;
        }

        @JsonSetter(value = "idpCertificate", nulls = Nulls.SKIP)
        public Builder idpCertificate(Optional<String> idpCertificate) {
            this.idpCertificate = idpCertificate;
            return this;
        }

        public Builder idpCertificate(String idpCertificate) {
            this.idpCertificate = Optional.ofNullable(idpCertificate);
            return this;
        }

        @JsonSetter(value = "idpEntityId", nulls = Nulls.SKIP)
        public Builder idpEntityId(Optional<String> idpEntityId) {
            this.idpEntityId = idpEntityId;
            return this;
        }

        public Builder idpEntityId(String idpEntityId) {
            this.idpEntityId = Optional.ofNullable(idpEntityId);
            return this;
        }

        @JsonSetter(value = "spEntityId", nulls = Nulls.SKIP)
        public Builder spEntityId(Optional<String> spEntityId) {
            this.spEntityId = spEntityId;
            return this;
        }

        public Builder spEntityId(String spEntityId) {
            this.spEntityId = Optional.ofNullable(spEntityId);
            return this;
        }

        @JsonSetter(value = "spAcsUrl", nulls = Nulls.SKIP)
        public Builder spAcsUrl(Optional<String> spAcsUrl) {
            this.spAcsUrl = spAcsUrl;
            return this;
        }

        public Builder spAcsUrl(String spAcsUrl) {
            this.spAcsUrl = Optional.ofNullable(spAcsUrl);
            return this;
        }

        public SamlConnection build() {
            return new SamlConnection(
                    id,
                    organizationId,
                    primary,
                    idpRedirectUrl,
                    idpCertificate,
                    idpEntityId,
                    spEntityId,
                    spAcsUrl,
                    additionalProperties);
        }
    }
}
