/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListScimUsersResponse.Builder.class)
public final class ListScimUsersResponse {
    private final Optional<List<ScimUser>> scimUsers;

    private final Optional<String> nextPageToken;

    private final Map<String, Object> additionalProperties;

    private ListScimUsersResponse(
            Optional<List<ScimUser>> scimUsers,
            Optional<String> nextPageToken,
            Map<String, Object> additionalProperties) {
        this.scimUsers = scimUsers;
        this.nextPageToken = nextPageToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of SCIM users.
     */
    @JsonProperty("scimUsers")
    public Optional<List<ScimUser>> getScimUsers() {
        return scimUsers;
    }

    /**
     * @return Value to use as <code>pageToken</code> for the next page of data. Empty if there is no more data.
     */
    @JsonProperty("nextPageToken")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListScimUsersResponse && equalTo((ListScimUsersResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListScimUsersResponse other) {
        return scimUsers.equals(other.scimUsers) && nextPageToken.equals(other.nextPageToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.scimUsers, this.nextPageToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<ScimUser>> scimUsers = Optional.empty();

        private Optional<String> nextPageToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListScimUsersResponse other) {
            scimUsers(other.getScimUsers());
            nextPageToken(other.getNextPageToken());
            return this;
        }

        @JsonSetter(value = "scimUsers", nulls = Nulls.SKIP)
        public Builder scimUsers(Optional<List<ScimUser>> scimUsers) {
            this.scimUsers = scimUsers;
            return this;
        }

        public Builder scimUsers(List<ScimUser> scimUsers) {
            this.scimUsers = Optional.ofNullable(scimUsers);
            return this;
        }

        @JsonSetter(value = "nextPageToken", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        public ListScimUsersResponse build() {
            return new ListScimUsersResponse(scimUsers, nextPageToken, additionalProperties);
        }
    }
}
