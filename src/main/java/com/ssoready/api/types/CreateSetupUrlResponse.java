/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.ssoready.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.ssoready.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateSetupUrlResponse.Builder.class)
public final class CreateSetupUrlResponse {
    private final Optional<String> url;

    private final Map<String, Object> additionalProperties;

    private CreateSetupUrlResponse(Optional<String> url, Map<String, Object> additionalProperties) {
        this.url = url;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The one-time, short-lived self-serve setup URL.
     * <p>Do not log or store this URL. Because this URL is one-time, loading it yourself means your customer will not be
     * able to load it after you.</p>
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateSetupUrlResponse && equalTo((CreateSetupUrlResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateSetupUrlResponse other) {
        return url.equals(other.url);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.url);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> url = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateSetupUrlResponse other) {
            url(other.getUrl());
            return this;
        }

        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public Builder url(Optional<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        public CreateSetupUrlResponse build() {
            return new CreateSetupUrlResponse(url, additionalProperties);
        }
    }
}
